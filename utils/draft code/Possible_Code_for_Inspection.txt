########## Inspecting variables for skewnesss ###########

def calculate_distribution_stats(df):
    # Calculate skewness, kurtosis, and variance for each column
    
    stats_df = pd.DataFrame(index=df.columns, 
                            columns=['Skewness', 'Kurtosis', 'Variance', 
                                     'Interpretation', 'Transformation', 'Visualization'])

    for column in df.columns:
        stats_df.at[column, 'Skewness'] = df[column].skew()
        stats_df.at[column, 'Kurtosis'] = df[column].kurtosis()
        stats_df.at[column, 'Variance'] = df[column].var()

        # Interpretation of skewness and kurtosis
        skew = stats_df.at[column, 'Skewness']
        kurt = stats_df.at[column, 'Kurtosis']
        transformation = "None"
        log_transformation = "None"
        visualization = "Histogram or Boxplot"

        if np.abs(skew) < 0.5:
            interpretation = 'Fairly Symmetrical'
            if df[column].min() >= 0:
                transformation = 'Log'
        elif skew >= 0.5:
            interpretation = 'Right Skewed'
            transformation = 'Square Root or Log'
        elif skew <= -0.5:
            interpretation = 'Left Skewed'
            transformation = 'Square or Cube'

        if kurt > 3:
            interpretation += ", Heavy Tails"
            visualization = "Boxplot for Outliers"

        stats_df.at[column, 'Interpretation'] = interpretation
        stats_df.at[column, 'Transformation'] = transformation
        stats_df.at[column, 'Visualization'] = visualization

    # Sort the DataFrame based on the absolute skewness
    stats_df['Absolute Skewness'] = stats_df['Skewness'].abs()
    sorted_stats = stats_df.sort_values(by='Absolute Skewness', ascending=False)

    return sorted_stats.drop('Absolute Skewness', axis=1)

# Example usage with your DataFrame
distribution_stats = calculate_distribution_stats(fred_quarterly_rate_of_change)
distribution_stats.head()


#####################